# -*- coding: utf-8 -*-
"""Heart Disease Detection Using Logistic Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g21V4Sr9oiETmf_yAxU4e5_PKwPIJBNt
"""

# Importing the Dependencies
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Data Collection and Processing

# Loading the CSV data into a Pandas DataFrame
heart_data = pd.read_csv('/content/dataset.csv')

# Display the first 5 rows of the dataset
print("First 5 rows of the dataset:")
print(heart_data.head())

# Display the last 5 rows of the dataset
print("\nLast 5 rows of the dataset:")
print(heart_data.tail())

# Number of rows and columns in the dataset
print("\nShape of the dataset:", heart_data.shape)

# Getting some info about the data
print("\nDataset Info:")
print(heart_data.info())

# Checking for missing values
print("\nMissing values in each column:")
print(heart_data.isnull().sum())

# Statistical measures about the data
print("\nStatistical summary of the dataset:")
print(heart_data.describe())

# Checking the distribution of Target Variable
print("\nTarget variable distribution:")
print(heart_data['target'].value_counts())
print("\n1 --> Defective Heart\n0 --> Healthy Heart")

# Splitting the Features and Target
X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print("\nFeature values (X):")
print(X.head())

print("\nTarget values (Y):")
print(Y.head())

# Splitting the Data into Training data & Test Data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print("\nShapes of datasets:")
print("X:", X.shape)
print("X_train:", X_train.shape)
print("X_test:", X_test.shape)

# Model Training - Logistic Regression
model = LogisticRegression(max_iter=1000)  # increased max_iter to ensure convergence

# Training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

# Model Evaluation - Accuracy Score

# Accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('\nAccuracy on Training data:', training_data_accuracy)

# Accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy on Test data:', test_data_accuracy)

# Building a Predictive System

# Sample input data
input_data = (62, 0, 0, 140, 268, 0, 0, 160, 0, 3.6, 0, 2, 2)

# Change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Predicting the result
prediction = model.predict(input_data_reshaped)

print("\nPrediction result:", prediction)
if prediction[0] == 0:
    print("The Person does NOT have Heart Disease")
else:
    print("The Person HAS Heart Disease")